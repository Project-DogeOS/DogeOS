#!/usr/bin/bash

# Most content of this file is borrowed from /smartdc/bin/smartos_prompt_config.sh
# Thanks for that, joyent :)

PATH=/usr/sbin:/usr/bin
export PATH

oldcwd=`pwd`
cd /dogeos/bin

. ./common.sh

DOGEOS_HOME=/dogeos
DOGEOS_EXTRA=$DOGEOS_HOME/mnt/dogeos-extra
NODE=/usr/node/bin/node

# Defaults
live_media=
live_media_path=
fifo_zone_json=

ntp_hosts="pool.ntp.org"
dns_resolver1="8.8.8.8"
dns_resolver2="8.8.4.4"
fifo_vm_mem=3072
fifo_vm_quota=40
fifoZoneUUID=
net0_nic=
net0_ip=
net0_gateway=
net0_netmask=

# Functions

dogeosPrepareResources()
{
  echo "Start preparing resources in $DOGEOS_EXTRA ... "
  mkdir -p $DOGEOS_EXTRA
  if [ "$live_media" == "usb" ]; then
    mount -F pcfs ${live_media_path/rdsk/dsk}:c $DOGEOS_EXTRA
  else # dvd
    mount -F hsfs ${live_media_path/rdsk/dsk} $DOGEOS_EXTRA
  fi
  $NODE $DOGEOS_HOME/bin/simple-pkgsrc-repo.js $DOGEOS_EXTRA/dogeos/fifo 8080 &
  echo $! >$DOGEOS_HOME/var/repo-fifo.pid
  $NODE $DOGEOS_HOME/bin/simple-pkgsrc-repo.js $DOGEOS_EXTRA/dogeos/joyent 8081 &
  echo $! >$DOGEOS_HOME/var/repo-joyent.pid
  echo "Done"
}

dogeosCloseResources()
{
  if [ -f $DOGEOS_HOME/var/repo-fifo.pid ]; then
    kill `cat $DOGEOS_HOME/var/repo-fifo.pid`
  fi
  if [ -f $DOGEOS_HOME/var/repo-joyent.pid ]; then
    kill `cat $DOGEOS_HOME/var/repo-joyent.pid`
  fi
  umount $DOGEOS_EXTRA
}

dogeosCreateVm()
{
  vmconf=$1
  echo "Create VM (This could take a while)..."
  result=`vmadm create -f $vmconf 2>&1`
  if ! grep -q "Successfully" <<<$result; then
    failAndExit "Oops, create fifo vm failed, that's something!"
  fi
  fifoZoneUUID=`echo $result | awk '{ print $NF; }'`
  echo "Done"
}

dogeosInstallComponents()
{
  dogeosGetAdminNicIp
  local nicAdminIp="$val"
  echo "Start install components for zone:" $fifoZoneUUID "..."
  zexec "echo \"http://release.project-fifo.net/pkg/rel/\" >>\"/opt/local/etc/pkgin/repositories.conf\""
  zexec cp /opt/local/etc/pkgin/repositories.conf /opt/local/etc/pkgin/repositories.conf.bak
  zexec "echo \"http://$nicAdminIp:8080\" >\"/opt/local/etc/pkgin/repositories.conf\""
  zexec "echo \"http://$nicAdminIp:8081\" >>\"/opt/local/etc/pkgin/repositories.conf\""
  zexec pkgin -fy up
  zexec "pkgin -y in nginx fifo-snarl"
  zexec "pkgin -y in fifo-sniffle"
  zexec "pkgin -y in fifo-howl"
  zexec "pkgin -y in fifo-wiggle"
  zexec "pkgin -y in fifo-jingles"
  zexec cp /opt/local/fifo-jingles/config/nginx.conf /opt/local/etc/nginx/nginx.conf
  zexec cp /opt/local/etc/pkgin/repositories.conf.bak /opt/local/etc/pkgin/repositories.conf
  echo "Done"
}

dogeosEnableSvcs()
{
  echo "Enable services of zone:" $fifoZoneUUID "..."

  local svcs="epmd snarl sniffle howl wiggle nginx"
  local done=0
  local ret=

  for svc in $svcs
  do
    done=0
    while : ; do
      if [ "$done" -ne 0 ]; then
        break
      fi

      echo "Try to enable svc $svc ..."
      zexec svcadm enable $svc
      if [ $? -eq 0 ]; then
        echo "OK"
      else
        echo "oops, will retry in 1 second..."
      fi

      echo "Now verifying svc $svc ..."
      ret=$(zexec svcs $svc | grep "online" | grep $svc)
      if [ -z "$ret" ]; then
        echo "oops, will retry in 1 second..."
      else
        echo "Verified."
        done=1
      fi

      sleep 1
    done
  done

  # now check fifo services in its way
  local fifosvcs="snarl sniffle howl wiggle"
  for svc in $fifosvcs
  do
    done=0
    while : ; do
      if [ "$done" -ne 0 ]; then
        break
      fi

      echo "Validate fifo service $svc ..."
      zexec /opt/local/fifo-$svc/bin/$svc ping
      if [ $? -eq 0 ]; then
        done=1
      else
        echo "oops, will retry in 1 second..."
      fi
      sleep 1
    done
  done

  echo "Services enabled: "
  zexec svcs epmd snarl sniffle howl wiggle nginx
  echo "Done"
}

dogeosPostConf()
{
  echo "Start to do post-configuration ..."
  adminPasswd=$1
  zexec fifoadm users add admin
  zexec fifoadm users grant admin ...
  zexec fifoadm users passwd admin $adminPasswd

  local message="Create default user group with basic permissions?"
  dlg --yesno "$message" 10 60
  local ret=$?
  if [ $? == 0 ]; then
    echo "Create default user group..."
    local UsersUUID=$(zexec fifoadm roles add Users)
    echo "Assign basic permissions to default user group..."
    zexec fifoadm roles grant Users cloud cloud status
    zexec fifoadm roles grant Users cloud datasets list
    zexec fifoadm roles grant Users cloud networks list
    zexec fifoadm roles grant Users cloud ipranges list
    zexec fifoadm roles grant Users cloud packages list
    zexec fifoadm roles grant Users cloud vms list
    zexec fifoadm roles grant Users cloud vms create
    zexec fifoadm roles grant Users hypervisors _ create
    zexec fifoadm roles grant Users datasets _ create
    zexec fifoadm roles grant Users roles $UserUUID get
  else
    echo "As you wish, skipped"
  fi
  echo "Done"
}

dogeosJoinCluster()
{
  local fifosvcs="snarl sniffle howl"
  if [ "$join_cluster" != "skip" ]; then
    echo "As you wish, start to join cluster:" $join_cluster

    for svc in $fifosvcs
    do
      zexec /opt/local/fifo-$svc/bin/$svc-admin join $svc@$join_cluster
      echo "$svc join cluster: $svc@$join_cluster done with code:" $?
    done
  fi
}

dogeosGenData()
{
  datafile=$1
  echo "{" >>$1
  echo "\"max_physical_memory\":" $fifo_vm_mem >>$1
  echo "," "\"quota\":" $fifo_vm_quota >>$1
  echo "," "\"net0nictag\":" "\"$net0_nic\"" >>$1
  echo "," "\"net0ip\":" "\"$net0_ip\"" >>$1
  echo "," "\"resolvers\": [ \"8.8.8.8\", \"8.8.4.4\" ]" >>$1
  if ! [ -z $net0_gateway ]; then
    echo "," "\"net0gateway\":" "\"$net0_gateway\"" >>$1
  fi
  if ! [ -z $net0_netmask ]; then
    echo "," "\"net0netmask\":" "\"$net0_netmask\"" >>$1
  fi
  echo "}" >>$1
}

sigexit()
{
  echo
  echo "System configuration has not been completed."
  echo "You must reboot to re-run system configuration."
  exit 0
}

dogeosWelcome()
{
  local message="
This wizard will help you to setup the FiFo Zone.

You must answer some questions to help us build the FiFo Zone configuration.

You will have a chance to review and correct your answers, as well as a chance to edit the final configuration, before it is applied.

Would you like to continue to setup?"
<<<<<<< HEAD:overlay/dogeos/bin/headnode-install
  dlg --title "DogeOS: Headnode Setup Wizard" --yesno "$message" 0 0
  dogeosTestCancelled $? "noconfirm"
}

dogeosChooseNicTag()
{
  local ret=
  local nics=
  local i=1

  if [ $gz_nic_cnt -eq 1]; then
    val=${gz_tags[0]}
    return
  fi

  while [ $i -le $gz_nic_cnt ]; do
    if [ $i -eq 1 ]; then
      nics=${nics}`printf "%d Link(%s),MAC(%s),TAG(%s) on" $i ${gz_links[$i]} ${gz_macs[$i]} ${gz_tags[$i]}`
    else
      nics=${nics}`printf " %d Link(%s),MAC(%s),TAG(%s) off" $i ${gz_links[$i]} ${gz_macs[$i]} ${gz_tags[$i]}`
    fi
    ((i++))
  done

  local message="Select the NIC of global zone to be used for FIFO zone:"
  local selected=

  while [ /usr/bin/true ]; do
    selected=$(dlg --stdout --no-cancel --radiolist "$message" 10 60 $gz_nic_cnt $nics)
    ret=$?
    dogeosTestCancelled $ret; [ -n "$tocont" ] && continue
    break
  done

  val=${gz_tags[$selected]}
}

dogeosSetIP()
{
  local ret=
  local message="Set IP for the default NIC of FIFO zone:
(IPv4 n.n.n.n or 'dhcp')
"
  val=""
  while [ -z "$val" ]; do
    val=$(dlg --stdout --no-cancel --inputbox "$message" 10 60 "dhcp")
    ret=$?
    dogeosTestCancelled $ret; [ -n "$tocont" ] && continue
    if [[ "$val" != "dhcp" ]]; then
      is_net "$val" || val=""
    fi
    [ -n "$val" ] && break
    dlg --msgbox "A valid IPv4 (n.n.n.n) or 'dhcp' must be provided." 10 60
  done
}

dogeosSetNetIP()
{
  local ret=
  local what=$1
  local default=$2
  local message="$what:
(IPv4 n.n.n.n)
"
  val=""
  while [ -z "$val" ]; do
    val=$(dlg --stdout --no-cancel --inputbox "$message" 10 60 "$default")
    ret=$?
    dogeosTestCancelled $ret; [ -n "$tocont" ] && continue
    is_net "$val" || val=""
    [ -n "$val" ] && break
    dlg --msgbox "A valid network mask (n.n.n.n) must be provided." 10 60
  done
}

=======
  dlg --title "DogeOS: FiFo Zone setup wizard" --yesno "$message" 0 0
  dogeosTestCancelled $? "noconfirm"
}

>>>>>>> e93f83c1d0624d1a69c8c89f04995e9ec9011ed2:overlay/dogeos/bin/fifozone-install
dogeosSetMem()
{
  local ret=
  val=""
  while [ -z "$val" ]; do
    val=$(dlg --stdout --no-cancel --inputbox "Memory for FIFO zone (in MB):" 10 60 "1024")
    ret=$?
    dogeosTestCancelled $ret; [ -n "$tocont" ] && continue
    if ! [[ "$val" =~ ^[0-9]+$ ]] ; then
      dlg --msgbox "A valid decimal number must be provided." 10 60
      continue
    else
      if [ $val -lt 1023 ]; then
        dlg --msgbox "Mem <2048MB will probably cause failures of some FiFo zone services. Please assign more." 10 60
        val=""
        continue
      fi
    fi
    break
  done
}

dogeosSetDiskQuota()
{
  local ret=
  val=""
  while [ -z "$val" ]; do
    val=$(dlg --stdout --no-cancel --inputbox "Disk Quota for FIFO zone (in GB):" 10 60 "20")
    ret=$?
    dogeosTestCancelled $ret; [ -n "$tocont" ] && continue
    if ! [[ "$val" =~ ^[0-9]+$ ]] ; then
      dlg --msgbox "A valid decimal number must be provided." 10 60
      continue
    else
      if [ $val -lt 19 ]; then
        dlg --msgbox "Disk <20GB will probably cause failures of some FiFo zone services. Please assign more." 10 60
        val=""
        continue
      fi
      break
    fi
  done
}

<<<<<<< HEAD:overlay/dogeos/bin/headnode-install
dogeosSetRootPasswd()
{
  local ret=
  val=""
  while [ -z "$val" ]; do
    val=$(dlg --stdout --insecure --no-cancel --passwordbox "Enter password for root of FIFO zone:" 10 60)
    ret=$?
    dogeosTestCancelled $ret
    if [ -z "$val" ]; then
      dlg --msgbox "A non-empty password must be provided." 10 60
      continue
    fi
    local cval=
    cval=$(dlg --stdout --insecure --no-cancel --passwordbox "Confirm password for root of FIFO zone:" 10 60)
    ret=$?
    dogeosTestCancelled $ret; [ -n "$tocont" ] && continue
    [ "$val" == "$cval" ] && break
    val=""
    dlg --msgbox "Two passwords do not match, please re-enter." 10 60
  done
}

=======
>>>>>>> e93f83c1d0624d1a69c8c89f04995e9ec9011ed2:overlay/dogeos/bin/fifozone-install
dogeosReview()
{
  local ret=
  local message="Please verify that there inputs are correct:

FiFo Zone quota

  Memory (in MB): $fifo_vm_mem
  Disk (in GB): $fifo_vm_quota

FiFo Zone NIC configuration

  NIC tag: $net0_nic
  IP address: $net0_ip"

  if [[ $net0_ip != 'dhcp' ]]; then
    message=${message}"
  Netmask: $net0_netmask
  Gateway: $net0_gateway
  DNS: $dns_resolver1,$dns_resolver2
  DNS search domain: $dns_domain
  NTP server: $ntp_hosts
  Domain name: $domainname
"
  fi

  if [ -z $join_cluster ]; then
    message=${message}"

Will join cluster @: $join_cluster
"
  fi

  dlg --yesno "$message" 30 60
  ret=$?
  if [ $ret -eq 0 ]; then
    val=""
  else
    val="retry"
  fi
}

dogeosAskJoinCluster()
{
  local ret=
  local message="Do you want to join this FiFo zone to a cluster ?
(If yes enter the IP otherwise leave this empty)
"
  local input=
  val=""
  while [ -z "$val" ]; do
    val=$(dlg --stdout --no-cancel --inputbox "$message" 10 60 "")
    ret=$?
    dogeosTestCancelled $ret; [ -n "$tocont" ] && continue
    if [[ "$val" != "" ]]; then
      is_net "$val" || val=""
    else
      val="skip"
    fi
    [ -n "$val" ] && break
    dlg --msgbox "A valid IPv4 (n.n.n.n) must be provided." 10 60
  done
}

dogeosAskConfiguration()
{
  while [ /usr/bin/true ]; do
    dogeosChooseNicTag "FiFo Zone"
    net0_nic="$val"
    dogeosSetIP "Set IP for the default NIC of FiFo Zone"
    net0_ip="$val"
    if [[ $net0_ip != 'dhcp' ]]; then
      dogeosSetNetIP "Set Net Mask for the default NIC of FIFO zone" "$net0_netmask"
      net0_netmask="$val"
      dogeosSetNetIP "Set Gateway for the default NIC of FIFO zone" "$net0_gateway"
      net0_gateway="$val"
    fi
    dogeosSetMem
    fifo_vm_mem="$val"
    dogeosSetDiskQuota
    fifo_vm_quota="$val"
    dogeosSetRootPasswd "FiFo Zone"
    root_shadow="$val"
    dogeosAskJoinCluster
    join_cluster="$val"
    dogeosReview
    if [ -z "$val" ]; then
      break
    fi
  done
}

dogeosGenZoneConf()
{
  # generate zone configure data
  local tmpfifodata=/tmp/fifojson-`date +%s`.data
  rm -rf $tmpfifodata
  touch $tmpfifodata
  dogeosGenData $tmpfifodata

  # generate zone json
  local tmpfifojson=/tmp/fifojson-`date +%s`.json
  rm -rf $tmpfifojson
  touch $tmpfifojson
  cat $tmpfifodata | $NODE doTool.js ../share/fifo/fifo-zone.json | json >$tmpfifojson

  local message="Continue with following json configuration of FiFo Zone ?

  "$(cat $tmpfifojson | json)
  dlg --yesno "$message" 30 60
  if [ $? -ne 0 ]; then
    exit $?
  fi

  val="$tmpfifojson"
}

#
# Main entry start here
#

# preparation
trap sigexit SIGINT

dogeosGetGZNicInfo

# now the guts
dlg_backtitle="DogeOS: Welcome!"

dogeosWelcome

# decide the live media type
dogeosFindLiveMediaType
live_media=$val
dogeosDecideMediaDev $live_media
live_media_path="$val"

<<<<<<< HEAD:overlay/dogeos/bin/headnode-install
dlg_backtitle="DogeOS: Network, Mem, Disk & Passwd Configuration"

dogeosAskConfiguration

dlg_backtitle="DogeOS: Preparing to provision FIFO zone"
=======
dlg_backtitle="DogeOS > FiFo Zone: Network, Mem, Disk & Passwd Configuration"

dogeosAskConfiguration

dlg_backtitle="DogeOS > FiFo Zone: Preparing to provision FIFO Zone"
>>>>>>> e93f83c1d0624d1a69c8c89f04995e9ec9011ed2:overlay/dogeos/bin/fifozone-install

dogeosGenZoneConf
fifo_zone_json="$val"

dogeosPrepareResources
dogeosImportImg
dogeosFixJoyentManifest
dogeosCreateVm $fifo_zone_json

setZexecUUID $fifoZoneUUID
dogeosInstallComponents
dogeosEnableSvcs
dogeosPostConf $root_shadow
dogeosCloseResources
dogeosJoinCluster

<<<<<<< HEAD:overlay/dogeos/bin/headnode-install
dlg_backtitle="DogeOS: Congratulation!"
=======
dlg_backtitle="DogeOS > FiFo Zone: Congratulation!"
>>>>>>> e93f83c1d0624d1a69c8c89f04995e9ec9011ed2:overlay/dogeos/bin/fifozone-install

dogeosFindZoneIp $fifoZoneUUID
fifo_zone_ip="$val"

<<<<<<< HEAD:overlay/dogeos/bin/headnode-install
dlg --msgbox "All done. FiFo zone is setup and running alive now!
=======
dlg --msgbox "All done. FiFo Zone is running alive now!
>>>>>>> e93f83c1d0624d1a69c8c89f04995e9ec9011ed2:overlay/dogeos/bin/fifozone-install

Please go to http://${fifo_zone_ip/net0 /} to manage your cloud!
" 10 60

cd $oldcwd
