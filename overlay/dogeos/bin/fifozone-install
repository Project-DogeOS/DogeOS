#!/usr/bin/bash

# Most content of this file is borrowed from /smartdc/bin/smartos_prompt_config.sh
# Thanks for that, joyent :)

PATH=/usr/sbin:/usr/bin
export PATH

oldcwd=`pwd`
cd /dogeos/bin

. ./common.sh

DOGEOS_HOME=/dogeos
DOGEOS_EXTRA=$DOGEOS_HOME/mnt/dogeos-extra
NODE=/usr/node/bin/node

# Defaults
live_media=
live_media_path=
fifo_zone_json=

ntp_hosts="pool.ntp.org"
dns_resolver1="8.8.8.8"
dns_resolver2="8.8.4.4"
fifo_vm_mem=3072
fifo_vm_quota=40
net0_nic=
net0_ip=
net0_gateway=
net0_netmask=

fifoZoneUUID=
fifoLeoFSAccessKey=
fifoLeoFSSecret=
fifoLeoFSUserPasswd=`openssl rand -base64 32 | fold -w8 | head -n1`
fifoLeoFSEndpoint="fifo-$(hostname)"

# Functions

dogeosPrepareResources()
{
  echo "Start preparing resources in $DOGEOS_EXTRA ... "
  mkdir -p $DOGEOS_EXTRA
  if [ "$live_media" == "usb" ]; then
    mount -F pcfs ${live_media_path/rdsk/dsk}:c $DOGEOS_EXTRA
  else # dvd
    mount -F hsfs ${live_media_path/rdsk/dsk} $DOGEOS_EXTRA
  fi
  $NODE $DOGEOS_HOME/bin/simple-pkgsrc-repo.js $DOGEOS_EXTRA/dogeos/fifo 8080 &
  echo $! >$DOGEOS_HOME/var/repo-fifo.pid
  $NODE $DOGEOS_HOME/bin/simple-pkgsrc-repo.js $DOGEOS_EXTRA/dogeos/joyent 8081 &
  echo $! >$DOGEOS_HOME/var/repo-joyent.pid
  echo "Done"
}

dogeosCloseResources()
{
  if [ -f $DOGEOS_HOME/var/repo-fifo.pid ]; then
    kill `cat $DOGEOS_HOME/var/repo-fifo.pid`
  fi
  if [ -f $DOGEOS_HOME/var/repo-joyent.pid ]; then
    kill `cat $DOGEOS_HOME/var/repo-joyent.pid`
  fi
  umount $DOGEOS_EXTRA
}

dogeosCreateVm()
{
  local vmconf=$1
  echo "Create VM (This could take a while)..."
  local result=`vmadm create -f $vmconf 2>&1`
  if ! grep -q "Successfully" <<<$result; then
    failAndExit "Oops, create fifo vm failed, that's something!"
  fi
  fifoZoneUUID=`echo $result | awk '{ print $NF; }'`
  echo "Done"
}

dogeosInstallComponents()
{
  dogeosGetAdminNicIp
  local nicAdminIp="$val"
  echo "Start install components for zone:" $fifoZoneUUID "..."
  zexec "echo \"http://release.project-fifo.net/pkg/rel/\" >>\"/opt/local/etc/pkgin/repositories.conf\""
  zexec cp -v /opt/local/etc/pkgin/repositories.conf /opt/local/etc/pkgin/repositories.conf.bak
  zexec "echo \"http://$nicAdminIp:8080\" >\"/opt/local/etc/pkgin/repositories.conf\""
  zexec "echo \"http://$nicAdminIp:8081\" >>\"/opt/local/etc/pkgin/repositories.conf\""
  zexec pkgin -fy up
  zexec pkgin -y in nginx
  zexec pkgin -y in leo_manager
  zexec pkgin -y in leo_storage
  zexec pkgin -y in leo_gateway
  zexec pkgin -y in fifo-snarl
  zexec pkgin -y in fifo-sniffle
  zexec pkgin -y in fifo-howl
  zexec pkgin -y in fifo-wiggle
  zexec pkgin -y in fifo-jingles
  zexec cp -v /opt/local/etc/pkgin/repositories.conf.bak /opt/local/etc/pkgin/repositories.conf
  echo "Done"
}

dogeosEnableLeoFS()
{
  local result=
  local finish=
  local ret=

  # currently, we setup all leofs componenets in the fifo zone, which is 1/1/1 manager/gateway/storage
  # in future, this part will be cleaned to support distributed leofs components

  echo "Enable leofs services of zone:" $fifoZoneUUID "..."

  # setup & start lefs/manager leofs/storage leofs/gateway

  # yes, in this version just disable this backup manager feature
  zexec "sed -e \"/^[^;]*manager.partner/d\" -i.bak /opt/local/leo_manager/etc/leo_manager.conf"

  # 8080 is defaultly used by wiggle, so just change to other port
  zexec "sed -e \"/^[^;]*http.port/s/=.*$/= 18080/\" -i.bak /opt/local/leo_gateway/etc/leo_gateway.conf"

  zexec svcadm enable epmd
  zexec svcadm enable "leofs/manager"
  zexec svcadm enable "leofs/storage"
  zexec svcadm enable "leofs/gateway"
  # now verify
  local svcs="epmd leofs/manager leofs/storage leofs/gateway"
  for svc in $svcs
  do
    finish=0
    echo "Now verifying svc $svc ..."
    while : ; do # TOFIX: infinite loop
      if [[ $finish -ne 0 ]]; then
        break
      fi

      finish=0
      ret=$(zexec svcs $svc | grep "online" | grep $svc)
      if [ -z "$ret" ]; then
        zexec svcadm disable $svc # disable first
        zexec svcadm enable $svc # then restart
        echo "oops, will retry in 5 second..."
      else
        echo "Verified."
        finish=1 # mark done and also sleep 1 second
      fi

      sleep 5
    done
  done

  # copy leofs-adm to fifo zone & chmod +x
  cp /dogeos/share/fifo/leofs-adm /zones/$fifoZoneUUID/root/root/
  zexec chmod +x /root/leofs-adm

  # start leofs & setup fifo stuff
  echo "check leofs status"
  while : ; do # TOFIX: infinite loop
    result=$(zexec /root/leofs-adm status | grep "storage_0" | grep "attached") # should not show problems with mnesia
    if [ -z "$result" ]; then
      echo "oops, seems not ready, wait for 5 second..."
    else
      echo "storage_0 is attached."
      break
    fi
    sleep 5
  done

  echo "now start leofs service"
  zexec /root/leofs-adm start

  echo "verify leofs status"
  while : ; do # TOFIX: infinite loop
    result=$(zexec /root/leofs-adm status | grep "storage_0" | grep "running") # should not show problems with mnesia
    if [ -z "$result" ]; then
      echo "oops, seems not ready, wait for 5 second..."
    else
      echo "storage_0 is running, leofs is alive."
      break
    fi
    sleep 5
  done

  zexec /root/leofs-adm status # should show storage and gateway nodes

  echo "leofs service should be OK, now register FiFo"
  zexec /root/leofs-adm add-endpoint $fifoLeoFSEndpoint
  zexec /root/leofs-adm get-endpoints

  result=$(zexec /root/leofs-adm create-user fifo_s3 $fifoLeoFSUserPasswd)

  # now parse the accessKey and secret
  # exmample output:
  #   [root@leofs-test ~]# ./leofs-adm create-user fifo_s3 123456
  #     access-key-id: 99517962ea1952b010c2
  #     secret-access-key: 84da153384481572a22f251618f25e73de9d4e51
  # reuslt should be one line as: "access-key-id: 99517962ea1952b010c2 secret-access-key: 84da153384481572a22f251618f25e73de9d4e51"
  fifoLeoFSAccessKey=$(echo $result | awk 'NR==1{ print $2 }')
  fifoLeoFSSecret=$(echo $result | awk 'NR==1{ print $4}')
  echo "fifo keys generated:" $fifoLeoFSAccessKey $fifoLeoFSSecret

  echo "add fifo buckets to leofs..."
  zexec /root/leofs-adm add-bucket fifo $fifoLeoFSAccessKey
  zexec /root/leofs-adm add-bucket fifo-images $fifoLeoFSAccessKey
  zexec /root/leofs-adm add-bucket fifo-snapshots $fifoLeoFSAccessKey

  # backup the critical info in FiFo zone file
  local fifoinfo="/root/dogeos.fifo.local"
  zexec "echo \"fifo-leofs-user: fifo_s3\" >>${fifoinfo}"
  zexec "echo \"fifo-leofs-passwd: ${fifoLeoFSUserPasswd}\" >>${fifoinfo}"
  zexec "echo \"fifo-leofs-access-key: ${fifoLeoFSAccessKey}\" >>${fifoinfo}"
  zexec "echo \"fifo-leofs-secret: ${fifoLeoFSSecret}\" >>${fifoinfo}"

  # leofs related stuff
  echo "sniffle-admin config set storage.s3.port 443"
  zexec sniffle-admin config set storage.s3.port 443
  echo "sniffle-admin config set storage.general.backend s3"
  zexec sniffle-admin config set storage.general.backend s3
  echo "sniffle-admin config set storage.s3.host 127.0.0.1"
  zexec sniffle-admin config set storage.s3.host 127.0.0.1
  echo "sniffle-admin config set storage.s3.access_key \"${fifoLeoFSAccessKey}\""
  zexec "sniffle-admin config set storage.s3.access_key ${fifoLeoFSAccessKey}"
  echo "sniffle-admin config set storage.s3.secret_key \"${fifoLeoFSSecret}\""
  zexec "sniffle-admin config set storage.s3.secret_key ${fifoLeoFSSecret}"
  echo "sniffle-admin config set storage.s3.image_bucket fifo-images"
  zexec sniffle-admin config set storage.s3.image_bucket fifo-images
  echo "sniffle-admin config set storage.s3.general_bucket fifo"
  zexec sniffle-admin config set storage.s3.general_bucket fifo
  echo "sniffle-admin config set storage.s3.snapshot_bucket fifo-snapshots"
  zexec sniffle-admin config set storage.s3.snapshot_bucket fifo-snapshots

  echo "all setting accepted, summary:"
  zexec sniffle-admin config show

  echo "Done"
}

dogeosEnableSvcs()
{
  echo "Enable services of zone:" $fifoZoneUUID "..."

  local svcs="epmd snarl sniffle howl wiggle nginx"
  local done=0
  local ret=

  # setup conf files first
  zexec cp /opt/local/fifo-jingles/config/nginx.conf /opt/local/etc/nginx/nginx.conf

  # enable svcs one by one
  for svc in $svcs
  do
    done=0
    while : ; do  # TOFIX: infinite loop
      if [ "$done" -ne 0 ]; then
        break
      fi

      echo "Try to enable svc $svc ..."
      zexec svcadm enable $svc
      if [ $? -eq 0 ]; then
        echo "OK"
      else
        echo "oops, will retry in 1 second..."
      fi

      echo "Now verifying svc $svc ..."
      ret=$(zexec svcs $svc | grep "online" | grep $svc)
      if [ -z "$ret" ]; then
        echo "oops, will retry in 5 second..."
      else
        echo "Verified."
        done=1
      fi

      sleep 5
    done
  done

  # now check fifo services in its way
  local fifosvcs="snarl sniffle howl wiggle"
  for svc in $fifosvcs
  do
    done=0
    while : ; do  # TOFIX: infinite loop
      if [ "$done" -ne 0 ]; then
        break
      fi

      echo "Validate fifo service $svc ..."
      ret=$(zexec /opt/local/fifo-$svc/bin/$svc ping)
      if [ $? -eq 0 ] && [[ $ret == *pong* ]]; then
        echo "alive"
        done=1 # mark done and also sleep 1 second
      else
        echo "oops, will retry in 1 second..."
      fi
      sleep 1
    done
  done

  echo "Services enabled: "
  zexec svcs epmd snarl sniffle howl wiggle nginx
  echo "Done"
}

dogeosPostConf()
{
  echo "Start to do post-configuration ..."
  adminPasswd=$1
  zexec fifoadm users add default admin
  zexec fifoadm users grant default admin ...
  zexec fifoadm users passwd default admin $adminPasswd

  local message="Create default user group with basic permissions?"
  dlg --yesno "$message" 10 60
  local ret=$?
  if [ $? == 0 ]; then
    echo "Create default user group..."
    local UsersUUID=$(zexec fifoadm roles add default Users)
    echo "Assign basic permissions to default user group..."
    zexec fifoadm roles grant default Users cloud cloud status
    zexec fifoadm roles grant default Users cloud datasets list
    zexec fifoadm roles grant default Users cloud networks list
    zexec fifoadm roles grant default Users cloud ipranges list
    zexec fifoadm roles grant default Users cloud packages list
    zexec fifoadm roles grant default Users cloud vms list
    zexec fifoadm roles grant default Users cloud vms create
    zexec fifoadm roles grant default Users hypervisors _ create
    zexec fifoadm roles grant default Users datasets _ create
    zexec fifoadm roles grant default Users roles $UserUUID get
  else
    echo "As you wish, skipped"
  fi
  echo "Done"
}

dogeosJoinCluster()
{
  local fifosvcs="snarl sniffle howl"
  if [ "$join_cluster" != "skip" ]; then
    echo "As you wish, start to join cluster:" $join_cluster

    for svc in $fifosvcs
    do
      zexec /opt/local/fifo-$svc/bin/$svc-admin join $svc@$join_cluster
      echo "$svc join cluster: $svc@$join_cluster done with code:" $?
    done
  fi
}

dogeosGenData()
{
  datafile=$1
  echo "{" >>$1
  echo "\"max_physical_memory\":" $fifo_vm_mem >>$1
  echo "," "\"quota\":" $fifo_vm_quota >>$1
  echo "," "\"net0nictag\":" "\"$net0_nic\"" >>$1
  echo "," "\"net0ip\":" "\"$net0_ip\"" >>$1
  echo "," "\"resolvers\": [ \"8.8.8.8\", \"8.8.4.4\" ]" >>$1
  if ! [ -z $net0_gateway ]; then
    echo "," "\"net0gateway\":" "\"$net0_gateway\"" >>$1
  fi
  if ! [ -z $net0_netmask ]; then
    echo "," "\"net0netmask\":" "\"$net0_netmask\"" >>$1
  fi
  echo "}" >>$1
}

sigexit()
{
  echo
  echo "System configuration has not been completed."
  echo "You must reboot to re-run system configuration."
  exit 0
}

dogeosWelcome()
{
  local message="
This wizard will help you to setup the FiFo Zone.

You must answer some questions to help us build the FiFo Zone configuration.

You will have a chance to review and correct your answers, as well as a chance to edit the final configuration, before it is applied.

Would you like to continue to setup?"
  dlg --title "DogeOS: FiFo Zone setup wizard" --yesno "$message" 0 0
  dogeosTestCancelled $? "noconfirm"
}

dogeosSetMem()
{
  local ret=
  val=""
  while [ -z "$val" ]; do
    val=$(dlg --stdout --no-cancel --inputbox "Memory for FIFO zone (in MB):" 10 60 "2048") # default 2GB mem
    ret=$?
    dogeosTestCancelled $ret; [ -n "$tocont" ] && continue
    if ! [[ "$val" =~ ^[0-9]+$ ]] ; then
      dlg --msgbox "A valid decimal number must be provided." 10 60
      continue
    else
      if [ $val -lt 2047 ]; then
        dlg --msgbox "Mem <2048MB will probably cause failures of some FiFo zone services. Please assign more." 10 60
        val=""
        continue
      fi
    fi
    break
  done
}

dogeosSetDiskQuota()
{
  local ret=
  val=""
  while [ -z "$val" ]; do
    val=$(dlg --stdout --no-cancel --inputbox "Disk Quota for FIFO zone (in GB):" 10 60 "20")
    ret=$?
    dogeosTestCancelled $ret; [ -n "$tocont" ] && continue
    if ! [[ "$val" =~ ^[0-9]+$ ]] ; then
      dlg --msgbox "A valid decimal number must be provided." 10 60
      continue
    else
      if [ $val -lt 19 ]; then
        dlg --msgbox "Disk <20GB will probably cause failures of some FiFo zone services. Please assign more." 10 60
        val=""
        continue
      fi
      break
    fi
  done
}

dogeosReview()
{
  local ret=
  local message="Please verify that there inputs are correct:

FiFo Zone quota

  Memory (in MB): $fifo_vm_mem
  Disk (in GB): $fifo_vm_quota

FiFo Zone NIC configuration

  NIC tag: $net0_nic
  IP address: $net0_ip"

  if [[ $net0_ip != 'dhcp' ]]; then
    message=${message}"
  Netmask: $net0_netmask
  Gateway: $net0_gateway
  DNS: $dns_resolver1,$dns_resolver2
  DNS search domain: $dns_domain
  NTP server: $ntp_hosts
  Domain name: $domainname
"
  fi

  if [ -z $join_cluster ]; then
    message=${message}"

Will join cluster @: $join_cluster
"
  fi

  dlg --yesno "$message" 30 60
  ret=$?
  if [ $ret -eq 0 ]; then
    val=""
  else
    val="retry"
  fi
}

dogeosAskJoinCluster()
{
  local ret=
  local message="Do you want to join this FiFo zone to a cluster ?
(If yes enter the IP otherwise leave this empty)
"
  local input=
  val=""
  while [ -z "$val" ]; do
    val=$(dlg --stdout --no-cancel --inputbox "$message" 10 60 "")
    ret=$?
    dogeosTestCancelled $ret; [ -n "$tocont" ] && continue
    if [[ "$val" != "" ]]; then
      is_net "$val" || val=""
    else
      val="skip"
    fi
    [ -n "$val" ] && break
    dlg --msgbox "A valid IPv4 (n.n.n.n) must be provided." 10 60
  done
}

dogeosAskConfiguration()
{
  while [ /usr/bin/true ]; do
    dogeosChooseNicTag "FiFo Zone"
    net0_nic="$val"
    dogeosSetIP "Set IP for the default NIC of FiFo Zone"
    net0_ip="$val"
    if [[ $net0_ip != 'dhcp' ]]; then
      dogeosSetNetIP "Set Net Mask for the default NIC of FIFO zone" "$net0_netmask"
      net0_netmask="$val"
      dogeosSetNetIP "Set Gateway for the default NIC of FIFO zone" "$net0_gateway"
      net0_gateway="$val"
    fi
    dogeosSetMem
    fifo_vm_mem="$val"
    dogeosSetDiskQuota
    fifo_vm_quota="$val"
    dogeosSetRootPasswd "FiFo Zone"
    root_shadow="$val"
    dogeosAskJoinCluster
    join_cluster="$val"
    dogeosReview
    if [ -z "$val" ]; then
      break
    fi
  done
}

dogeosGenZoneConf()
{
  # generate zone configure data
  local tmpfifodata=/tmp/fifojson-`date +%s`.data
  rm -rf $tmpfifodata
  touch $tmpfifodata
  dogeosGenData $tmpfifodata

  # generate zone json
  local tmpfifojson=/tmp/fifojson-`date +%s`.json
  rm -rf $tmpfifojson
  touch $tmpfifojson
  cat $tmpfifodata | $NODE doTool.js ../share/fifo/fifo-zone.json | json >$tmpfifojson

  local message="Continue with following json configuration of FiFo Zone ?

  "$(cat $tmpfifojson | json)
  dlg --yesno "$message" 30 60
  if [ $? -ne 0 ]; then
    exit $?
  fi

  val="$tmpfifojson"
}

#
# Main entry start here
#

# preparation
trap sigexit SIGINT

dogeosCheckSysEnv 5

dogeosGetGZNicInfo

# now the guts
dlg_backtitle="DogeOS: Welcome!"

dogeosWelcome

# decide the live media type
dogeosFindLiveMediaType
live_media=$val
dogeosDecideMediaDev $live_media
live_media_path="$val"

dlg_backtitle="DogeOS > FiFo Zone: Network, Mem, Disk & Passwd Configuration"

dogeosAskConfiguration

dlg_backtitle="DogeOS > FiFo Zone: Preparing to provision FIFO Zone"

dogeosGenZoneConf
fifo_zone_json="$val"

dogeosPrepareResources
dogeosImportImg "base64-14.2.0"
dogeosFixJoyentManifest
dogeosCreateVm $fifo_zone_json

setZexecUUID $fifoZoneUUID
dogeosInstallComponents
dogeosEnableSvcs
dogeosEnableLeoFS
dogeosPostConf $root_shadow
dogeosCloseResources
dogeosJoinCluster

dlg_backtitle="DogeOS > FiFo Zone: Congratulation!"

dogeosFindZoneIp $fifoZoneUUID
fifo_zone_ip="$val"

dlg --msgbox "All done. FiFo Zone is running alive now!

Please go to http://${fifo_zone_ip/net0 /} to manage your cloud!
" 10 60

cd $oldcwd
