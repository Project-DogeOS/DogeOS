#!/usr/bin/bash

# Most content of this file is borrowed from /smartdc/bin/smartos_prompt_config.sh
# Thanks for that, joyent :)

PATH=/usr/sbin:/usr/bin
export PATH

oldcwd=`pwd`
#cd /dogeos/bin

. ./common.sh

DOGEOS_HOME=/dogeos
DOGEOS_EXTRA=$DOGEOS_HOME/mnt/dogeos-extra
NODE=/usr/node/bin/node

# Defaults
backtitle=
live_media=
mail_to="root@localhost"
ntp_hosts="pool.ntp.org"
dns_resolver1="8.8.8.8"
dns_resolver2="8.8.4.4"
fifo_vm_mem=3072
fifo_vm_quota=40
fifoZoneUUID=
net0_nic=
net0_ip=
net0_gateway=
net0_netmask=

# Globals
declare -a states
declare -a nics
declare -a assigned

# functions

failAndExit()
{
  echo $@
  exit 1
}

fifoPrepareResources()
{
  echo "Start preparing resources in $DOGEOS_EXTRA ... "
  mkdir -p $DOGEOS_EXTRA
  if [ "$live_media" == "usb" ]; then
    mount -F pcfs /dev/dsk/c0t0d0p0:c $DOGEOS_EXTRA
  else # dvd
    mount -F hsfs /dev/dsk/c0t1d0p0 $DOGEOS_EXTRA
  fi
  $NODE $DOGEOS_HOME/bin/simple-pkgsrc-repo.js $DOGEOS_EXTRA/dogeos/fifo 8080 &
  echo $! >$DOGEOS_HOME/var/repo-fifo.pid
  $NODE $DOGEOS_HOME/bin/simple-pkgsrc-repo.js $DOGEOS_EXTRA/dogeos/joyent 8081 &
  echo $! >$DOGEOS_HOME/var/repo-joyent.pid
  echo "Done"
}

fifoCloseResources()
{
  if [ -f $DOGEOS_HOME/var/repo-fifo.pid ]; then
    kill `cat $DOGEOS_HOME/var/repo-fifo.pid`
  fi
  if [ -f $DOGEOS_HOME/var/repo-joyent.pid ]; then
    kill `cat $DOGEOS_HOME/var/repo-joyent.pid`
  fi
  umount $DOGEOS_EXTRA
}

fifoCheckNetworkReachability()
{
  ping datasets.joyent.com 10 || failAndExit "Reach datasets.joyent.com failed. Check your network!" 
  echo "datasets.joyent.com reached!"

  ping release.project-fifo.net 10 || failAndExit "Reach release.project-fifo.net failed. Check your network!"
  echo "release.project-fifo.net reached!"
}

fifoImportImg()
{
  echo "Start import datasets ..."
  #imgadm update
  #imgadm import 17c98640-1fdb-11e3-bf51-3708ce78e75a
  imgadm install -m $DOGEOS_EXTRA/dogeos/datasets/base64-13.2.1.dsmanifest  -f $DOGEOS_EXTRA/dogeos/datasets/base64-13.2.1.zfs.gz
  echo "Done"
}

fifoFixJoyentManifest()
{
  echo "Start check joyent manifest..."
  local fixes="joyent joyent-minimal"
  for fix in $fixes
  do
    echo "Fix manifest of brand $fix..."
    cp ../share/joyent/manifest/sysconfig.xml /zones/manifests/$fix/milestone/
    echo "Done"
  done       
  echo "All Done"
}

fifoCreateVm()
{
  vmconf=$1
  echo "Create VM (This could take a while)..."
  result=`vmadm create -f $vmconf 2>&1`
  if ! grep -q "Successfully" <<<$result; then
    failAndExit "Oops, create fifo vm failed, that's something!"
  fi
  fifoZoneUUID=`echo $result | awk '{ print $NF; }'`
  echo "Done"
}

fifoInstallComponents()
{
  echo "Start install components for zone:" ${fifoZoneUUID} "..."
  nicAdminDev=`$NODE findnictag.js | grep -w 'admin' | awk '{ print $3 }'`
  nicAdminIp=`ifconfig $nicAdminDev | grep -w inet | awk '{ print $2 }'`
  #zlogin $fifoZoneUUID "echo \"http://release.project-fifo.net/pkg/rel/\" >>\"/opt/local/etc/pkgin/repositories.conf\""
  zlogin $fifoZoneUUID cp /opt/local/etc/pkgin/repositories.conf /opt/local/etc/pkgin/repositories.conf.bak
  zlogin $fifoZoneUUID "echo \"http://$nicAdminIp:8080\" >\"/opt/local/etc/pkgin/repositories.conf\""
  zlogin $fifoZoneUUID "echo \"http://$nicAdminIp:8081\" >>\"/opt/local/etc/pkgin/repositories.conf\""
  zlogin $fifoZoneUUID pkgin -fy up
  zlogin $fifoZoneUUID "pkgin -y in nginx fifo-snarl"
  zlogin $fifoZoneUUID "pkgin -y in fifo-sniffle"
  zlogin $fifoZoneUUID "pkgin -y in fifo-howl"
  zlogin $fifoZoneUUID "pkgin -y in fifo-wiggle"
  zlogin $fifoZoneUUID "pkgin -y in fifo-jingles"
  zlogin $fifoZoneUUID cp /opt/local/fifo-jingles/config/nginx.conf /opt/local/etc/nginx/nginx.conf
  zlogin $fifoZoneUUID cp /opt/local/etc/pkgin/repositories.conf.bak /opt/local/etc/pkgin/repositories.conf
  echo "Done"
}

fifoEnableSvcs()
{
  echo "Enable services of zone:" $fifoZoneUUID "..."

  local svcs="epmd snarl sniffle howl wiggle nginx"
  local done=0
  for svc in $svcs
  do
    done=0
    while : ; do
      if [ "$done" -ne 0 ]; then
        break
      fi
      echo "Try to enable svc $svc"
      zlogin $fifoZoneUUID svcadm enable $svc
      if [ $? -eq 0 ]; then
        echo "OK"
        done=1
      else
        echo "oops, will retry in 1 second..."
      fi     
      sleep 1 
    done     
  done       
             
  sleep 2    
  echo "Verifying..."
  zlogin $fifoZoneUUID svcs epmd snarl sniffle howl wiggle nginx
  echo "Done"
}

fifoPostConf()
{
  echo "Start to do post-configuration ..."
  adminPasswd=$1
  zlogin $fifoZoneUUID fifoadm users add admin
  zlogin $fifoZoneUUID fifoadm users grant admin ...
  zlogin $fifoZoneUUID fifoadm users passwd admin $adminPasswd 
  echo "Done"
}

fifoGenData()
{
  datafile=$1
  echo "{" >>$1
  echo "\"max_physical_memory\":" $fifo_vm_mem >>$1
  echo "," "\"quota\":" $fifo_vm_quota >>$1
  echo "," "\"net0nictag\":" "\"$net0_nic\"" >>$1
  echo "," "\"net0ip\":" "\"$net0_ip\"" >>$1
  echo "," "\"resolvers\": [ \"8.8.8.8\", \"8.8.4.4\" ]" >>$1
  if ! [ -z $net0_gateway ]; then 
    echo "," "\"net0gateway\":" "\"$net0_gateway\"" >>$1
  fi
  if ! [ -z $net0_netmask ]; then
    echo "," "\"net0netmask\":" "\"$net0_netmask\"" >>$1
  fi
  echo "}" >>$1
}

sigexit()
{
  echo
  echo "System configuration has not been completed."
  echo "You must reboot to re-run system configuration."
  exit 0
}

printheader() 
{
  local newline=
  local cols=`tput cols`
  local subheader=$1
  
  if [ $cols -gt 80 ] ;then
    newline='\n'
  fi
  
  clear
  for i in {1..80} ; do printf "-" ; done && printf "$newline"
  printf " %-40s\n" "DogeOS Setup"
  printf " %-40s%38s\n" "$subheader" "http://dogeos.github.io/install"
  for i in {1..80} ; do printf "-" ; done && printf "$newline"

}

trap sigexit SIGINT

#
# Get local NIC info
#
nic_cnt=0
while read -r mac tag link; do
  ((nic_cnt++))
  tags[$nic_cnt]=$tag
  macs[$nic_cnt]=$mac
  links[$nic_cnt]=$link
done < <($NODE findnictag.js 2>/dev/null)

dogeosTestCancelled()
{
  local ret=$1
  local confirm=$2
  tocont=""

  if [ $ret -ne 0 ]; then
    if [ -z $confirm ]; then
      dialog --yesno "Really cancel the installation?" 10 60
      if [ $? -ne 0 ]; then
        tocont="yes"
        return
      fi
    fi
    echo "As your wish, cancelled. Bye."
    exit $ret
  fi
}

dogeosWelcome()
{
  local message="
This program will help you to setup the FIFO Zone of Headnode.

You must answer some questions to help us build the FIFO Zone configuration.

You will have a chance to review and correct your answers, as well as a chance to edit the final configuration, before it is applied.

Would you like to continue to setup?"
  dialog --backtitle "$backtitle" --title "DogeOS: Headnode Setup Wizard" --yesno "$message" 0 0
  dogeosTestCancelled $? "noconfirm"
}

dogeosAskLiveMediaType()
{
  local ret=
  local message="Your DogeOS live type is ?
"
  local types="1 LiveUSB on 2 LiveDVD-ROM off"
  local selected=

  echo $types
  while [ /usr/bin/true ]; do
    selected=$(dialog --backtitle "$backtitle" --stdout --no-cancel --radiolist "$message" 10 60 2 $types)
    ret=$?
    dogeosTestCancelled $ret; [ -n "$tocont" ] && continue
    break
  done

  if [ "$selected" == "1" ]; then
    val="usb"
  else
    val="dvd"
  fi
}

dogeosChooseNicTag()
{
  local ret=
  local nics=
  local i=1
  while [ $i -le $nic_cnt ]; do
    if [ $i -eq 1 ]; then
      nics=${nics}`printf "%d Link(%s),MAC(%s),TAG(%s) on" $i ${links[$i]} ${macs[$i]} ${tags[$i]}`
    else
      nics=${nics}`printf " %d Link(%s),MAC(%s),TAG(%s) off" $i ${links[$i]} ${macs[$i]} ${tags[$i]}`
    fi
    ((i++))
  done

  local message="Select the NIC of global zone to be used for FIFO zone:" 
  local selected=
  
  while [ /usr/bin/true ]; do
    selected=$(dialog --backtitle "$backtitle" --stdout --no-cancel --radiolist "$message" 10 60 $nic_cnt $nics)
    ret=$?
    dogeosTestCancelled $ret; [ -n "$tocont" ] && continue
    break
  done

  val=${tags[$selected]}
}

dogeosSetIP()
{
  local ret=
  local message="Set IP for the default NIC of FIFO zone:
(IPv4 n.n.n.n or 'dhcp')
"
  local input=
  val=""
  while [ -z "$val" ]; do
    val=$(dialog --backtitle "$backtitle" --stdout --no-cancel --inputbox "$message" 10 60 "dhcp")
    ret=$?
    dogeosTestCancelled $ret; [ -n "$tocont" ] && continue
    if [[ "$val" != "dhcp" ]]; then
      is_net "$val" || val=""
    fi
    [ -n "$val" ] && break
    dialog --backtitle "$backtitle" --msgbox "A valid network number (n.n.n.n) or 'dhcp' must be provided." 10 60
  done
}

dogeosSetNetIP()
{
  local ret=
  local what=$1
  local default=$2
  local message="$what:
(IPv4 n.n.n.n)
"
  local input=
  val=""
  while [ -z "$val" ]; do
    val=$(dialog --backtitle "$backtitle" --stdout --no-cancel --inputbox "$message" 10 60 "$default")
    ret=$?
    dogeosTestCancelled $ret; [ -n "$tocont" ] && continue
    is_net "$val" || val=""
    [ -n "$val" ] && break
    dialog --backtitle "$backtitle" --msgbox "A valid network mask (n.n.n.n) must be provided." 10 60
  done
}

dogeosSetMem()
{
  local ret=
  val=""
  while [ -z "$val" ]; do
    val=$(dialog --backtitle "$backtitle" --stdout --no-cancel --inputbox "Memory for FIFO zone (in MB):" 10 60 "2048")
    ret=$?
    dogeosTestCancelled $ret; [ -n "$tocont" ] && continue
    if ! [[ "$val" =~ ^[0-9]+$ ]] ; then
      dialog --backtitle "$backtitle" --msgbox "A valid decimal number must be provided." 10 60
    else
      break
    fi
  done
}

dogeosSetDiskQuota()
{
  local ret=
  val=""
  while [ -z "$val" ]; do
    val=$(dialog --backtitle "$backtitle" --stdout --no-cancel --inputbox "Disk Quota for FIFO zone (in GB):" 10 60 "20")
    ret=$?
    dogeosTestCancelled $ret; [ -n "$tocont" ] && continue
    if ! [[ "$val" =~ ^[0-9]+$ ]] ; then
      dialog --backtitle "$backtitle" --msgbox "A valid decimal number must be provided." 10 60
    else
      break
    fi
  done
}

dogeosSetRootPasswd()
{
  local ret=
  val=""
  while [ -z "$val" ]; do
    val=$(dialog --backtitle "$backtitle" --stdout --insecure --no-cancel --passwordbox "Enter password for root of FIFO zone:" 10 60)
    ret=$?
    dogeosTestCancelled $ret 
    if [ -z "$val" ]; then
      dialog --backtitle "$backtitle" --msgbox "A non-empty password must be provided." 10 60
      continue
    fi
    local cval=
    cval=$(dialog --backtitle "$backtitle" --stdout --insecure --no-cancel --passwordbox "Confirm password for root of FIFO zone:" 10 60)
    ret=$?
    dogeosTestCancelled $ret; [ -n "$tocont" ] && continue
    [ "$val" == "$cval" ] && break
    val=""
    dialog --backtitle "$backtitle" --msgbox "Two passwords do not match, please re-enter." 10 60
  done
}

dogeosReview()
{
  local ret=
  local message="Please verify that there inputs are correct:

FIFO zone quota

  Memory (in MB): $fifo_vm_mem
  Disk (in GB): $fifo_vm_quota 

FIFO zone NIC configuration

  MAC address: $net0_nic
  IP address: $net0_ip"

if [[ $net0_ip != 'dhcp' ]]; then
  message=${message}"
  Netmask: $net0_netmask
  Gateway: $net0_gateway
  DNS: $dns_resolver1,$dns_resolver2
  DNS search domain: $dns_domain
  NTP server: $ntp_hosts
  Domain name: $domainname
"
fi

  dialog --backtitle "$backtitle" --yesno "$message" 30 60
  ret=$?
  if [ $ret -eq 0 ]; then
    val=""
  else
    val="retry"
  fi
}

dogeosAskConfiguration()
{
  while [ /usr/bin/true ]; do
    dogeosChooseNicTag
    net0_nic="$val"
    dogeosSetIP
    net0_ip="$val"
    if [[ $net0_ip != 'dhcp' ]]; then
      dogeosSetNetIP "Set Net Mask for the default NIC of FIFO zone" "$net0_netmask"
      net0_netmask="$val"
      dogeosSetNetIP "Set Gateway for the default NIC of FIFO zone" "$net0_gateway"
      net0_gateway="$val"
    fi
    dogeosSetMem
    fifo_vm_mem="$val"
    dogeosSetDiskQuota
    fifo_vm_quota="$val"
    dogeosSetRootPasswd
    root_shadow="$val"
    dogeosReview
    if [ -z "$val" ]; then
      break
    fi
  done
}

#
# Main loop to prompt for user input
#
backtitle="DogeOS: Welcome!"
dogeosWelcome

dogeosAskLiveMediaType
live_media="$val"

backtitle="DogeOS: Network, Mem, Disk & Passwd Configuration"
dogeosAskConfiguration

# all info collected, now the guts

backtitle="DogeOS: Preparing to provision FIFO zone"

# generate zone configure data
tmpfifodata=/tmp/fifojson-`date +%s`.data
rm -rf $tmpfifodata
touch $tmpfifodata
fifoGenData $tmpfifodata

# generate zone json
tmpfifojson=/tmp/fifojson-`date +%s`.json
rm -rf $tmpfifojson
touch $tmpfifojson
cat $tmpfifodata | $NODE doTool.js ../share/fifo/fifo-zone.json | json >$tmpfifojson

message="Continue with following json configuration of FIFO zone ?

"$(cat $tmpfifojson | json)
dialog --backtitle "$backtitle" --yesno "$message" 30 60
if [ $? -ne 0 ]; then
  exit $?  
fi

fifoPrepareResources
#fifoCheckNetworkReachability
fifoImportImg
fifoFixJoyentManifest
fifoCreateVm $tmpfifojson
fifoInstallComponents
fifoEnableSvcs
fifoPostConf $root_shadow
fifoCloseResources

echo "All done. DogeOS headnode is alive now!"

cd $oldcwd
