#!/usr/bin/bash

# Most content of this file is borrowed from /smartdc/bin/smartos_prompt_config.sh
# Thanks for that, joyent :)

PATH=/usr/sbin:/usr/bin
export PATH

. ./common.sh

DOGEOS_HOME=/dogeos
DOGEOS_EXTRA=$DOGEOS_HOME/mnt/dogeos-extra
NODE=/usr/node/bin/node

# Defaults
mail_to="root@localhost"
ntp_hosts="pool.ntp.org"
dns_resolver1="8.8.8.8"
dns_resolver2="8.8.4.4"
fifo_vm_mem=3072
fifo_vm_quota=40
fifoZoneUUID=
net0_nic=
net0_ip=
net0_gateway=
net0_netmask=

# Globals
declare -a states
declare -a nics
declare -a assigned

# functions

failAndExit()
{
  echo $@
  exit 1
}

fifoPrepareResources()
{
  echo "Start preparing resources in $DOGEOS_EXTRA ... "
  mkdir -p $DOGEOS_EXTRA
  #mount -F pcfs /dev/dsk/c0t0d0p0:c $DOGEOS_EXTRA
  mount -F hsfs /dev/dsk/c0t1d0p0 $DOGEOS_EXTRA
  $NODE $DOGEOS_HOME/bin/simple-pkgsrc-repo.js $DOGEOS_EXTRA/dogeos/fifo 8080 &
  echo $! >$DOGEOS_HOME/var/repo-fifo.pid
  $NODE $DOGEOS_HOME/bin/simple-pkgsrc-repo.js $DOGEOS_EXTRA/dogeos/joyent 8081 &
  echo $! >$DOGEOS_HOME/var/repo-joyent.pid
  echo "Done"
}

fifoCloseResources()
{
  if [ -f $DOGEOS_HOME/var/repo-fifo.pid ]; then
    kill `cat $DOGEOS_HOME/var/repo-fifo.pid`
  fi
  if [ -f $DOGEOS_HOME/var/repo-joyent.pid ]; then
    kill `cat $DOGEOS_HOME/var/repo-joyent.pid`
  fi
  umount $DOGEOS_EXTRA
}

fifoCheckNetworkReachability()
{
  ping datasets.joyent.com 10 || failAndExit "Reach datasets.joyent.com failed. Check your network!" 
  echo "datasets.joyent.com reached!"

  ping release.project-fifo.net 10 || failAndExit "Reach release.project-fifo.net failed. Check your network!"
  echo "release.project-fifo.net reached!"
}

fifoImportImg()
{
  echo "Start import datasets ..."
  #imgadm update
  #imgadm import 17c98640-1fdb-11e3-bf51-3708ce78e75a
  imgadm install -m $DOGEOS_EXTRA/dogeos/datasets/base64-13.2.1.dsmanifest  -f $DOGEOS_EXTRA/dogeos/datasets/base64-13.2.1.zfs.gz
  echo "Done"
}

fifoFixJoyentManifest()
{
  echo "Start check joyent manifest..."
  local fixes="joyent joyent-minimal"
  for fix in $fixes
  do
    echo "Fix manifest of brand $fix..."
    cp ../share/joyent/manifest/sysconfig.xml /zones/manifests/$fix/milestone/
    echo "Done"
  done       
  echo "All Done"
}

fifoCreateVm()
{
  vmconf=$1
  echo "Create VM (This could take a while)..."
  result=`vmadm create -f $vmconf 2>&1`
  if ! grep -q "Successfully" <<<$result; then
    failAndExit "Oops, create fifo vm failed, that's something!"
  fi
  fifoZoneUUID=`echo $result | awk '{ print $NF; }'`
  echo "Done"
}

fifoInstallComponents()
{
  echo "Start install components for zone:" ${fifoZoneUUID} "..."
  nicAdminDev=`$NODE findnictag.js | grep -w 'admin' | awk '{ print $3 }'`
  nicAdminIp=`ifconfig $nicAdminDev | grep -w inet | awk '{ print $2 }'`
  #zlogin $fifoZoneUUID "echo \"http://release.project-fifo.net/pkg/rel/\" >>\"/opt/local/etc/pkgin/repositories.conf\""
  zlogin $fifoZoneUUID cp /opt/local/etc/pkgin/repositories.conf /opt/local/etc/pkgin/repositories.conf.bak
  zlogin $fifoZoneUUID "echo \"http://$nicAdminIp:8080\" >\"/opt/local/etc/pkgin/repositories.conf\""
  zlogin $fifoZoneUUID "echo \"http://$nicAdminIp:8081\" >>\"/opt/local/etc/pkgin/repositories.conf\""
  zlogin $fifoZoneUUID pkgin -fy up
  zlogin $fifoZoneUUID "pkgin -y in nginx fifo-snarl"
  zlogin $fifoZoneUUID "pkgin -y in fifo-sniffle"
  zlogin $fifoZoneUUID "pkgin -y in fifo-howl"
  zlogin $fifoZoneUUID "pkgin -y in fifo-wiggle"
  zlogin $fifoZoneUUID "pkgin -y in fifo-jingles"
  zlogin $fifoZoneUUID cp /opt/local/fifo-jingles/config/nginx.conf /opt/local/etc/nginx/nginx.conf
  zlogin $fifoZoneUUID cp /opt/local/etc/pkgin/repositories.conf.bak /opt/local/etc/pkgin/repositories.conf
  echo "Done"
}

fifoEnableSvcs()
{
  echo "Enable services of zone:" $fifoZoneUUID "..."

  local svcs="epmd snarl sniffle howl wiggle nginx"
  local done=0
  for svc in $svcs
  do
    done=0
    while : ; do
      if [ "$done" -ne 0 ]; then
        break
      fi
      echo "Try to enable svc $svc"
      zlogin $fifoZoneUUID svcadm enable $svc
      if [ $? -eq 0 ]; then
        echo "OK"
        done=1
      else
        echo "oops, will retry in 1 second..."
      fi     
      sleep 1 
    done     
  done       
             
  sleep 2    
  echo "Verifying..."
  zlogin $fifoZoneUUID svcs epmd snarl sniffle howl wiggle nginx
  echo "Done"
}

fifoPostConf()
{
  echo "Start to do post-configuration ..."
  adminPasswd=$1
  zlogin $fifoZoneUUID fifoadm users add admin
  zlogin $fifoZoneUUID fifoadm users grant admin ...
  zlogin $fifoZoneUUID fifoadm users passwd admin $adminPasswd 
  echo "Done"
}

fifoGenData()
{
  datafile=$1
  echo "{" >>$1
  echo "\"max_physical_memory\":" $fifo_vm_mem >>$1
  echo "," "\"quota\":" $fifo_vm_quota >>$1
  echo "," "\"net0nictag\":" "\"$net0_nic\"" >>$1
  echo "," "\"net0ip\":" "\"$net0_ip\"" >>$1
  echo "," "\"resolvers\": [ \"8.8.8.8\", \"8.8.4.4\" ]" >>$1
  if ! [ -z $net0_gateway ]; then 
    echo "," "\"net0gateway\":" "\"$net0_gateway\"" >>$1
  fi
  if ! [ -z $net0_netmask ]; then
    echo "," "\"net0netmask\":" "\"$net0_netmask\"" >>$1
  fi
  echo "}" >>$1
}

sigexit()
{
  echo
  echo "System configuration has not been completed."
  echo "You must reboot to re-run system configuration."
  exit 0
}

# Input must be a valid network number (see is_net())
promptnet()
{
  val=""
  def="$2"
  while [ -z "$val" ]; do
    if [ -n "$def" ]; then
      printf "%s [%s]: " "$1" "$def"
    else
      printf "%s: " "$1"
    fi
    read val
    [ -z "$val" ] && val="$def"
    if [[ "$val" != "dhcp" ]]; then
      is_net "$val" || val=""
    fi
    [ -n "$val" ] && break
    echo "A valid network number (n.n.n.n) or 'dhcp' must be provided."
  done
}

printnics()
{
  i=1
  printf "%-6s %-9s %-18s %-7s\n" "Number" "Link" "MAC Address" "Tag"
  while [ $i -le $nic_cnt ]; do
    printf "%-6d %-9s %-18s %-7s\n" $i ${links[$i]} ${macs[$i]} ${tags[$i]}
    ((i++))
  done
}

# Must choose a valid NIC on this system
promptnic()
{
  if [[ $nic_cnt -eq 1 ]]; then
    val="${tags[1]}"
    return
  fi

  printnics
  num=0
  while [ /usr/bin/true ]; do
    printf "Enter the number of the NIC for the %s interface: " "$1"
    read num
    if ! [[ "$num" =~ ^[0-9]+$ ]] ; then
      echo ""
    elif [ $num -ge 1 -a $num -le $nic_cnt ]; then
      selected_tag="${tags[$num]}"
      break
    fi
    # echo "You must choose between 1 and $nic_cnt."
    printnics
  done

  val=$selected_tag
}

promptpw()
{
  while [ /usr/bin/true ]; do
    val=""
    while [ -z "$val" ]; do
      printf "%s: " "$1"
      stty -echo
      read val
      stty echo
      echo
      if [ -n "$val" ]; then
        if [ "$2" == "chklen" -a ${#val} -lt 6 ]; then
          echo "The password must be at least" \
              "6 characters long."
          val=""
        else
          break
        fi
      else 
        echo "A value must be provided."
      fi
    done

    cval=""
    while [ -z "$cval" ]; do
      printf "%s: " "Confirm password"
      stty -echo
      read cval
      stty echo
      echo
      [ -n "$cval" ] && break
      echo "A value must be provided."
    done

    [ "$val" == "$cval" ] && break

    echo "The entries do not match, please re-enter."
  done
}

printheader() 
{
  local newline=
  local cols=`tput cols`
  local subheader=$1
  
  if [ $cols -gt 80 ] ;then
    newline='\n'
  fi
  
  clear
  for i in {1..80} ; do printf "-" ; done && printf "$newline"
  printf " %-40s\n" "DogeOS Setup"
  printf " %-40s%38s\n" "$subheader" "http://dogeos.github.io/install"
  for i in {1..80} ; do printf "-" ; done && printf "$newline"

}

trap sigexit SIGINT

#
# Get local NIC info
#
nic_cnt=0
while read -r mac tag link; do
  ((nic_cnt++))
  tags[$nic_cnt]=$tag
  macs[$nic_cnt]=$mac
  links[$nic_cnt]=$link
done < <($NODE findnictag.js 2>/dev/null)

#
# Show welcome
#
printheader "Headnode FIFO Zone Setup Wizard, WoW"

message="
You must answer the following questions to before setup the FIFO Zone.
You will have a chance to review and correct your answers, as well as a
chance to edit the final configuration, before it is applied.

Would you like to continue to setup? [Y/n]"

printf "$message"
read continue;
if [[ $continue == 'n' ]]; then
  printf "Cancelled, bye.\n"
  exit 0
fi

#
# Main loop to prompt for user input
#
while [ /usr/bin/true ]; do

  # Networking
  printheader "Networking" 
  promptnic "FIFO default nic"
  net0_nic="$val"
  promptnet "IP address (or 'dhcp' )" "$net0_ip"
  net0_ip="$val"
  if [[ $net0_ip != 'dhcp' ]]; then
    # netmask, gateway, resolvers, domainname, domain, etc
    promptnet "netmask" "$admin_netmask"
    net0_netmask="$val"
    printheader "Networking - Continued"
    message=""
    printf "$message"
    message="
  The default gateway will determine which network will be used to connect to
  other networks.\n\n"
    printf "$message"
    promptnet "Enter the default gateway IP" "$net0_gateway"
    net0_gateway="$val"
    #promptval "Enter the Primary DNS server IP" "$dns_resolver1"
    #dns_resolver1="$val"
    #promptval "Enter the Secondary DNS server IP" "$dns_resolver2"
    #dns_resolver2="$val"
    #promptval "Enter the domain name" "$domainname"
    #domainname="$val"
    #promptval "Default DNS search domain" "$dns_domain"
    #dns_domain="$val"
  fi  

  # Mem, Disk Quota
  printheader "FIFO VM Configuration"
  message=""
  printf "$message"
  promptval "Memory for FIFO VM (in Megabytes)" "$fifo_vm_mem"
  fifo_vm_mem="$val"
  promptval "Disk Quota for FIFO VM (in Megabytes)" "$fifo_vm_quota" 
  fifo_vm_quota="$val"

  # Admin Account
  printheader "Admin Account Information"
  promptpw "Enter FIFO admin password" "nolen"
  root_shadow="$val"
  printheader "Verify Configuration"

  # Final Review 
  message=""
  printf "$message"
  echo "Verify that the following values are correct:"
  echo
  echo "Memory for FIFO VM (in Megabytes):" "$fifo_vm_mem"
  echo "Disk Quota for FIFO VM (in Megabytes):" "$fifo_vm_quota" 
  echo "MAC address: $net0_nic"
  echo "IP address: $net0_ip"
  if [[ $net0_ip != 'dhcp' ]]; then
    echo "Netmask: $net0_netmask"
    echo "Gateway router IP address: $net0_gateway"
    echo "DNS servers: $dns_resolver1,$dns_resolver2"
    echo "Default DNS search domain: $dns_domain"
    echo "NTP server: $ntp_hosts"
    echo "Domain name: $domainname"
    echo
  fi
  promptval "Is this correct?" "y"
  [ "$val" == "y" ] && break
  clear

done # end of main while 

# all info collected, now the guts

printheader "Provision FIFO zone & configuration"

# generate zone configure data
tmpfifodata=/tmp/fifojson-`date +%s`.data
rm -rf $tmpfifodata
touch $tmpfifodata
fifoGenData $tmpfifodata

# generate zone json
tmpfifojson=/tmp/fifojson-`date +%s`.json
rm -rf $tmpfifojson
touch $tmpfifojson
cat $tmpfifodata | $NODE doTool.js ../share/fifo/fifo-zone.json | json >$tmpfifojson
echo "The json configuration for FIFO zone:" 
cat $tmpfifojson | json
promptval "input 'y' to continue..."
[ "$val" == "y" ] || failAndExit "Cancelled. Bye."

fifoPrepareResources
#fifoCheckNetworkReachability
fifoImportImg
fifoFixJoyentManifest
fifoCreateVm $tmpfifojson
fifoInstallComponents
fifoEnableSvcs
fifoPostConf $root_shadow
fifoCloseResources

echo "All done. DogeOS headnode is alive now!"

